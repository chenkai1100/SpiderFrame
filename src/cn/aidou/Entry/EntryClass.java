package cn.aidou.Entry;


import org.apache.log4j.Logger;

/**
 * 程序有哪些不足 多线程怎样对任务管理的比较好？效率会高一些？ 一个线程负责一个对象，一个对象拥有1把锁，当锁中的对象出现故障的时候有监听器自行断电，
 * 终止线程，进而抛出异常给开发人员，当线程与任务链接状况很好的情况下（需要有很好的监听
 * 排错机制），每个需要访问任务的线程拥有对象任务的一把锁，实现了线程对任务的互斥管理， 方便了责任的划分。
 * @author aidou
 */
public class EntryClass
{
    /**
     * [数据流处理]
     * 源：以流的形式到达处理器
     * execute 符合特定业务流程的中间处理过程
     * 目标：将任务结果输出到指定地方
     * [监控运行状态层面]
     * 在运行过程中加入log4j日志处理，把每一关健步骤都监控起来---log4j
     * 由运行状态各项参数将过程及结果动态展现出来---类似ganglia
     * [引入的第三方服务]
     * 1.flume系统日志收集系统
     * 2.kafka消息队列
     * 3.zookeeper分布式应用程序协调服务
     * 4.流处理引擎 spark streaming or JStorm
     * 5.hdfs存储数据/mapreduce计算数据
     * @param args
     */
    //args 输入参数按照：driver url username password 顺序输入
	private static Logger logger = Logger.getLogger(EntryClass.class);
    public static void main(String[] args) throws Exception
    {

    	/********************************************************/
    	/**
    	 * 开源框架集成情况：
    	 * a.将开源任务调度框架集成进来
    	 * b.kafka消息队列的源码阅读与集成
    	 * c.流处理技术应用到项目当中
    	 * d.hdfs分布式文件系统存储数据以及mapreduce过程
    	 * f.flume项目的集成情况
    	 * g.zookeeper
    	 * 
    	 * #############阅读源码与学习源码以及应用情况
    	 * #############积累算法和整个架构的思想
    	 */
    	/********************************************************/
        /**
         * 1.输入流的产生
         */
    	/**
         * 2.输入流格式化切分
         */
    	/**
         * 3.任务调度容器处理爬虫作业--------------------------开源框架
         */
    	/***********************初始化基础运行环境开始***********************/
    	/**
    	 * #.1管理器初始化数据库运行环境
    	 */
    	Manager sm = new Manager(args);
    	/**
         * #.2初始化线程池环境
         */
        sm.initWorkSpace();
        /**
         * #.3初始化爬虫群的各项参数
         */
        sm.initMember(10, 4);
        /***********************初始化基础运行环境结束***********************/
        /**
         * 4.执行爬虫任务！
         */
        sm.executeWork();
    	/**
    	 * #############JVM+爬虫的心跳机制+分布式缓存机制+任务的负载均衡策略
    	 */
        /**
         * #############scala+python+并发编程学习+大数据技术源码学习
         */
        
        /**********************借鉴************************/
    	//时间触发基于内存的处理引擎，符合条件的开仓处理。和database不同
        //实时风险控制 跟踪
        //开仓模式识别
        /************************************************/
    }
}
